"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = (function () {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.offset = offset;
    this.line = line;
    this.column = column;

    this.name = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        peg$FAILED = {},
        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction = peg$parsestart,
        peg$c0 = { type: "other", description: "expression" },
        peg$c1 = peg$FAILED,
        peg$c2 = function peg$c2(e) {
      return e;
    },
        peg$c3 = null,
        peg$c4 = "s",
        peg$c5 = { type: "literal", value: "s", description: "\"s\"" },
        peg$c6 = "course",
        peg$c7 = { type: "literal", value: "course", description: "\"course\"" },
        peg$c8 = "where",
        peg$c9 = { type: "literal", value: "where", description: "\"where\"" },
        peg$c10 = function peg$c10(count, where) {
      return {
        $type: "where",
        $count: count,
        $where: where
      };
    },
        peg$c11 = "only",
        peg$c12 = { type: "literal", value: "only", description: "\"only\"" },
        peg$c13 = "courses",
        peg$c14 = { type: "literal", value: "courses", description: "\"courses\"" },
        peg$c15 = function peg$c15(where) {
      return {
        $type: "filter",
        $where: where
      };
    },
        peg$c16 = "occurrence",
        peg$c17 = { type: "literal", value: "occurrence", description: "\"occurrence\"" },
        peg$c18 = "of",
        peg$c19 = { type: "literal", value: "of", description: "\"of\"" },
        peg$c20 = function peg$c20(count, course) {
      return {
        $type: "occurrence",
        $count: count,
        course: course
      };
    },
        peg$c21 = "{",
        peg$c22 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c23 = "}",
        peg$c24 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c25 = function peg$c25(q) {
      return q;
    },
        peg$c26 = { type: "other", description: "qualification-or" },
        peg$c27 = "|",
        peg$c28 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c29 = function peg$c29(lhs, rhs) {
      return {
        $type: "boolean",
        $or: [lhs].concat("$or" in rhs ? rhs.$or : [rhs])
      };
    },
        peg$c30 = { type: "other", description: "qualification-and" },
        peg$c31 = "&",
        peg$c32 = { type: "literal", value: "&", description: "\"&\"" },
        peg$c33 = function peg$c33(lhs, rhs) {
      return {
        $type: "boolean",
        $and: [lhs].concat("$and" in rhs ? rhs.$and : [rhs])
      };
    },
        peg$c34 = "from",
        peg$c35 = { type: "literal", value: "from", description: "\"from\"" },
        peg$c36 = function peg$c36(f, q) {
      return Object.assign(f, { $where: q });
    },
        peg$c37 = [],
        peg$c38 = /^[a-z0-9_\-]/i,
        peg$c39 = { type: "class", value: "[a-z0-9_\\-]i", description: "[a-z0-9_\\-]i" },
        peg$c40 = function peg$c40(word) {
      return word.join("");
    },
        peg$c41 = function peg$c41(key, op, value) {
      var _$value;

      return {
        $type: "qualification",
        $key: key,
        $value: (_$value = {}, _defineProperty(_$value, op, value), _defineProperty(_$value, "$type", "operator"), _$value)
      };
    },
        peg$c42 = { type: "other", description: "function" },
        peg$c43 = function peg$c43(name, prop) {
      return {
        $name: name,
        $prop: prop,
        $type: "function"
      };
    },
        peg$c44 = "<=",
        peg$c45 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c46 = function peg$c46() {
      return "$lte";
    },
        peg$c47 = "<",
        peg$c48 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c49 = function peg$c49() {
      return "$lt";
    },
        peg$c50 = "==",
        peg$c51 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c52 = "=",
        peg$c53 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c54 = function peg$c54() {
      return "$eq";
    },
        peg$c55 = ">=",
        peg$c56 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c57 = function peg$c57() {
      return "$gte";
    },
        peg$c58 = ">",
        peg$c59 = { type: "literal", value: ">", description: "\">\"" },
        peg$c60 = function peg$c60() {
      return "$gt";
    },
        peg$c61 = "!=",
        peg$c62 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c63 = function peg$c63() {
      return "$ne";
    },
        peg$c64 = { type: "other", description: "whitespace" },
        peg$c65 = /^[ \n\t\r]/,
        peg$c66 = { type: "class", value: "[ \\n\\t\\r]", description: "[ \\n\\t\\r]" },
        peg$c67 = "zero",
        peg$c68 = { type: "literal", value: "zero", description: "\"zero\"" },
        peg$c69 = "eleven",
        peg$c70 = { type: "literal", value: "eleven", description: "\"eleven\"" },
        peg$c71 = "one",
        peg$c72 = { type: "literal", value: "one", description: "\"one\"" },
        peg$c73 = "twelve",
        peg$c74 = { type: "literal", value: "twelve", description: "\"twelve\"" },
        peg$c75 = "two",
        peg$c76 = { type: "literal", value: "two", description: "\"two\"" },
        peg$c77 = "thirteen",
        peg$c78 = { type: "literal", value: "thirteen", description: "\"thirteen\"" },
        peg$c79 = "three",
        peg$c80 = { type: "literal", value: "three", description: "\"three\"" },
        peg$c81 = "fourteen",
        peg$c82 = { type: "literal", value: "fourteen", description: "\"fourteen\"" },
        peg$c83 = "four",
        peg$c84 = { type: "literal", value: "four", description: "\"four\"" },
        peg$c85 = "fifteen",
        peg$c86 = { type: "literal", value: "fifteen", description: "\"fifteen\"" },
        peg$c87 = "five",
        peg$c88 = { type: "literal", value: "five", description: "\"five\"" },
        peg$c89 = "sixteen",
        peg$c90 = { type: "literal", value: "sixteen", description: "\"sixteen\"" },
        peg$c91 = "six",
        peg$c92 = { type: "literal", value: "six", description: "\"six\"" },
        peg$c93 = "seventeen",
        peg$c94 = { type: "literal", value: "seventeen", description: "\"seventeen\"" },
        peg$c95 = "seven",
        peg$c96 = { type: "literal", value: "seven", description: "\"seven\"" },
        peg$c97 = "eighteen",
        peg$c98 = { type: "literal", value: "eighteen", description: "\"eighteen\"" },
        peg$c99 = "eight",
        peg$c100 = { type: "literal", value: "eight", description: "\"eight\"" },
        peg$c101 = "nineteen",
        peg$c102 = { type: "literal", value: "nineteen", description: "\"nineteen\"" },
        peg$c103 = "nine",
        peg$c104 = { type: "literal", value: "nine", description: "\"nine\"" },
        peg$c105 = "twenty",
        peg$c106 = { type: "literal", value: "twenty", description: "\"twenty\"" },
        peg$c107 = "ten",
        peg$c108 = { type: "literal", value: "ten", description: "\"ten\"" },
        peg$c109 = function peg$c109(num) {
      if (num === "zero") {
        return 0;
      } else if (num === "one") {
        return 1;
      } else if (num === "two") {
        return 2;
      } else if (num === "three") {
        return 3;
      } else if (num === "four") {
        return 4;
      } else if (num === "five") {
        return 5;
      } else if (num === "six") {
        return 6;
      } else if (num === "seven") {
        return 7;
      } else if (num === "eight") {
        return 8;
      } else if (num === "nine") {
        return 9;
      } else if (num === "ten") {
        return 10;
      } else if (num === "eleven") {
        return 11;
      } else if (num === "twelve") {
        return 12;
      } else if (num === "thirteen") {
        return 13;
      } else if (num === "fourteen") {
        return 14;
      } else if (num === "fifteen") {
        return 15;
      } else if (num === "sixteen") {
        return 16;
      } else if (num === "seventeen") {
        return 17;
      } else if (num === "eighteen") {
        return 18;
      } else if (num === "nineteen") {
        return 19;
      } else if (num === "twenty") {
        return 20;
      }
    },
        peg$c110 = "!",
        peg$c111 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c112 = function peg$c112(value) {
      return {
        $type: "boolean",
        $not: value
      };
    },
        peg$c113 = function peg$c113(value) {
      return value;
    },
        peg$c114 = "all",
        peg$c115 = { type: "literal", value: "all", description: "\"all\"" },
        peg$c116 = "any",
        peg$c117 = { type: "literal", value: "any", description: "\"any\"" },
        peg$c118 = function peg$c118() {
      return 1;
    },
        peg$c119 = "none",
        peg$c120 = { type: "literal", value: "none", description: "\"none\"" },
        peg$c121 = function peg$c121() {
      return 0;
    },
        peg$c122 = ",",
        peg$c123 = { type: "literal", value: ",", description: "\",\"" },
        peg$c124 = function peg$c124(second) {
      return second;
    },
        peg$c125 = function peg$c125(val, rest) {
      return [val].concat(rest);
    },
        peg$c126 = function peg$c126(count, of) {
      var flattened = flatten(of);

      if (count === "all") count = flattened.length;

      if (count && flattened.length < count) throw new Error("you requested " + count + " items, but only listed " + flattened.length + " options (" + JSON.stringify(flattened) + ").");

      return {
        $type: "of",
        $count: count,
        $of: flattened
      };
    },
        peg$c127 = "credit",
        peg$c128 = { type: "literal", value: "credit", description: "\"credit\"" },
        peg$c129 = "department",
        peg$c130 = { type: "literal", value: "department", description: "\"department\"" },
        peg$c131 = "children",
        peg$c132 = { type: "literal", value: "children", description: "\"children\"" },
        peg$c133 = function peg$c133() {
      return { $from: "children" };
    },
        peg$c134 = "filter",
        peg$c135 = { type: "literal", value: "filter", description: "\"filter\"" },
        peg$c136 = function peg$c136() {
      return { $from: "filter" };
    },
        peg$c137 = function peg$c137(where) {
      return { $from: "where", $where: where };
    },
        peg$c138 = function peg$c138(count, what, from) {
      if (what === "department" && from["$from"] === "where") throw new Error("cannot use a modifier with \"departments from courses\"");
      return Object.assign({
        $type: "modifier",
        $count: count,
        $what: what
      }, from);
    },
        peg$c139 = /^[A-Z0-9]/,
        peg$c140 = { type: "class", value: "[A-Z0-9]", description: "[A-Z0-9]" },
        peg$c141 = /^[A-Za-z0-9_\- \/]/,
        peg$c142 = { type: "class", value: "[A-Za-z0-9_\\- \\/]", description: "[A-Za-z0-9_\\- \\/]" },
        peg$c143 = function peg$c143(initial, rest) {
      return initial + rest.join("");
    },
        peg$c144 = function peg$c144(title) {
      return title.trim();
    },
        peg$c145 = { type: "other", description: "requirement reference" },
        peg$c146 = "(",
        peg$c147 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c148 = ")",
        peg$c149 = { type: "literal", value: ")", description: "\")\"" },
        peg$c150 = function peg$c150(t) {
      return " (" + t + ")";
    },
        peg$c151 = function peg$c151(a, b) {
      return "" + a + (b || "");
    },
        peg$c152 = function peg$c152(title) {
      if (options.abbreviations && title in options.abbreviations) {
        title = options.abbreviations[title];
      } else if (options.titles && title in options.titles) {
        title = options.titles[title];
      }
      return {
        $type: "reference",
        $requirement: title
      };
    },
        peg$c153 = { type: "other", description: "a single period" },
        peg$c154 = ".",
        peg$c155 = { type: "literal", value: ".", description: "\".\"" },
        peg$c156 = function peg$c156(semester) {
      return { semester: semester };
    },
        peg$c157 = function peg$c157(year, sub) {
      return Object.assign({ year: year }, sub);
    },
        peg$c158 = function peg$c158(section, sub) {
      return Object.assign({ section: section }, sub);
    },
        peg$c159 = function peg$c159(dept, num, details) {
      return Object.assign({ $type: "course" }, details || {}, dept || fetchDept() || {}, num);
    },
        peg$c160 = function peg$c160(c1, c2) {
      return c1 + c2;
    },
        peg$c161 = function peg$c161(chars) {
      return { dept: chars.join(""), type: "joined" };
    },
        peg$c162 = "/",
        peg$c163 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c164 = function peg$c164(l1, l2) {
      return { dept: l1 + l2, type: "seperate" };
    },
        peg$c165 = function peg$c165(dept1, part2) {
      var type = part2.type;
      var dept2 = part2.dept;

      var department = undefined;
      if (type === "joined") {
        department = { department: [dept1 + dept2] };
      } else if (type === "seperate") {
        department = { department: [expandDepartment(dept1), expandDepartment(dept2)] };
      }
      storeDept(department);
      return department;
    },
        peg$c166 = { type: "other", description: "course number" },
        peg$c167 = function peg$c167(nums) {
      return { number: parseInt(nums.join("")) };
    },
        peg$c168 = "XX",
        peg$c169 = { type: "literal", value: "XX", description: "\"XX\"" },
        peg$c170 = function peg$c170(num) {
      return { level: num * 100 };
    },
        peg$c171 = "I",
        peg$c172 = { type: "literal", value: "I", description: "\"I\"" },
        peg$c173 = "L",
        peg$c174 = { type: "literal", value: "L", description: "\"L\"" },
        peg$c175 = function peg$c175(num, international, lab) {
      var result = {};

      if (international) {
        result.international = true;
      }
      if (lab) {
        result.lab = true;
      }

      return Object.assign(result, num);
    },
        peg$c176 = "*",
        peg$c177 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c178 = function peg$c178(nums) {
      return parseInt(nums.join(""));
    },
        peg$c179 = /^[1-5]/,
        peg$c180 = { type: "class", value: "[1-5]", description: "[1-5]" },
        peg$c181 = function peg$c181(num) {
      return parseInt(num);
    },
        peg$c182 = /^[A-Z]/,
        peg$c183 = { type: "class", value: "[A-Z]", description: "[A-Z]" },
        peg$c184 = function peg$c184(char) {
      return char;
    },
        peg$c185 = /^[a-z]/i,
        peg$c186 = { type: "class", value: "[a-z]i", description: "[a-z]i" },
        peg$c187 = function peg$c187(chars) {
      return chars.join("");
    },
        peg$c188 = function peg$c188(num) {
      return parseInt(num.join(""));
    },
        peg$c189 = /^[0-9]/,
        peg$c190 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$currPos = 0,
        peg$reportedPos = 0,
        peg$cachedPos = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos = 0,
        peg$maxFailExpected = [],
        peg$silentFails = 0,
        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(null, [{ type: "other", description: description }], peg$reportedPos);
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) {
              details.line++;
            }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) {
        return;
      }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function (a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
          }

          return s.replace(/\\/g, "\\\\").replace(/"/g, "\\\"").replace(/\x08/g, "\\b").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\f/g, "\\f").replace(/\r/g, "\\r").replace(/[\x00-\x07\x0B\x0E\x0F]/g, function (ch) {
            return "\\x0" + hex(ch);
          }).replace(/[\x10-\x1F\x80-\xFF]/g, function (ch) {
            return "\\x" + hex(ch);
          }).replace(/[\u0180-\u0FFF]/g, function (ch) {
            return "\\u0" + hex(ch);
          }).replace(/[\u1080-\uFFFF]/g, function (ch) {
            return "\\u" + hex(ch);
          });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc,
            foundDesc,
            i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1 ? expectedDescs.slice(0, -1).join(", ") + " or " + expectedDescs[expected.length - 1] : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(message !== null ? message : buildMessage(expected, found), expected, found, pos, posDetails.line, posDetails.column);
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parseor();

      return s0;
    }

    function peg$parseexpr() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenot();
        if (s2 === peg$FAILED) {
          s2 = peg$parseparenthetical();
          if (s2 === peg$FAILED) {
            s2 = peg$parsecourse();
            if (s2 === peg$FAILED) {
              s2 = peg$parsewhere();
              if (s2 === peg$FAILED) {
                s2 = peg$parsefilter();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseoccurrence();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseof();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parsemodifier();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parsereference();
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c2(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c0);
        }
      }

      return s0;
    }

    function peg$parseoptional_s() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 115) {
        s0 = peg$c4;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c5);
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$c3;
      }

      return s0;
    }

    function peg$parsewhere() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsecounter();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c6) {
            s3 = peg$c6;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c7);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptional_s();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c8) {
                  s6 = peg$c8;
                  peg$currPos += 5;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c9);
                  }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsequalifier();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c10(s1, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsefilter() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c11) {
        s1 = peg$c11;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c12);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c13) {
            s3 = peg$c13;
            peg$currPos += 7;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c14);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c8) {
                s5 = peg$c8;
                peg$currPos += 5;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c9);
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsequalifier();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c15(s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseoccurrence() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsecounter();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c16) {
            s3 = peg$c16;
            peg$currPos += 10;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c17);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptional_s();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c18) {
                  s6 = peg$c18;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c19);
                  }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsecourse();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c20(s1, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsequalifier() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c21;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c22);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseor_q();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c23;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c24);
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c25(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseor_q() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseand_q();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 124) {
            s3 = peg$c27;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c28);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseor_q();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c29(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseand_q();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c26);
        }
      }

      return s0;
    }

    function peg$parseand_q() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseparenthetical_q();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 38) {
            s3 = peg$c31;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c32);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseand_q();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c33(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseparenthetical_q();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c30);
        }
      }

      return s0;
    }

    function peg$parseparenthetical_q() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseopen_paren();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseor_q();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseclose_paren();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c25(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsequalification();
      }

      return s0;
    }

    function peg$parsequalification() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

      s0 = peg$currPos;
      s1 = peg$parseword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseoperator();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parsefunc();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c34) {
                    s8 = peg$c34;
                    peg$currPos += 4;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c35);
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse_();
                    if (s9 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 7) === peg$c13) {
                        s10 = peg$c13;
                        peg$currPos += 7;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c14);
                        }
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parse_();
                        if (s11 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c8) {
                            s12 = peg$c8;
                            peg$currPos += 5;
                          } else {
                            s12 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c9);
                            }
                          }
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parse_();
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parsequalifier();
                              if (s14 !== peg$FAILED) {
                                peg$reportedPos = s5;
                                s6 = peg$c36(s6, s14);
                                s5 = s6;
                              } else {
                                peg$currPos = s5;
                                s5 = peg$c1;
                              }
                            } else {
                              peg$currPos = s5;
                              s5 = peg$c1;
                            }
                          } else {
                            peg$currPos = s5;
                            s5 = peg$c1;
                          }
                        } else {
                          peg$currPos = s5;
                          s5 = peg$c1;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c1;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c1;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c1;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c1;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c1;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$currPos;
                s6 = [];
                if (peg$c38.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c39);
                  }
                }
                if (s7 !== peg$FAILED) {
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    if (peg$c38.test(input.charAt(peg$currPos))) {
                      s7 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c39);
                      }
                    }
                  }
                } else {
                  s6 = peg$c1;
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s5;
                  s6 = peg$c40(s6);
                }
                s5 = s6;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c41(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsefunc() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseopen_paren();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseword();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseclose_paren();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c43(s1, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c42);
        }
      }

      return s0;
    }

    function peg$parseoperator() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c44) {
        s1 = peg$c44;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c45);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c46();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 60) {
          s1 = peg$c47;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c48);
          }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c49();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c50) {
            s1 = peg$c50;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c51);
            }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s1 = peg$c52;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c53);
              }
            }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c54();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c55) {
              s1 = peg$c55;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c56);
              }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c57();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 62) {
                s1 = peg$c58;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c59);
                }
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c60();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c61) {
                  s1 = peg$c61;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c62);
                  }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c63();
                }
                s0 = s1;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      peg$silentFails++;
      s0 = [];
      if (peg$c65.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c66);
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c65.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c66);
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c64);
        }
      }

      return s0;
    }

    function peg$parsecounter() {
      var s0;

      s0 = peg$parseenglish_integer();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenumeric_integer();
      }

      return s0;
    }

    function peg$parseenglish_integer() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c67) {
        s1 = peg$c67;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c68);
        }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c69) {
          s1 = peg$c69;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c70);
          }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c71) {
            s1 = peg$c71;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c72);
            }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c73) {
              s1 = peg$c73;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c74);
              }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c75) {
                s1 = peg$c75;
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c76);
                }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 8) === peg$c77) {
                  s1 = peg$c77;
                  peg$currPos += 8;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c78);
                  }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c79) {
                    s1 = peg$c79;
                    peg$currPos += 5;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c80);
                    }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 8) === peg$c81) {
                      s1 = peg$c81;
                      peg$currPos += 8;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c82);
                      }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c83) {
                        s1 = peg$c83;
                        peg$currPos += 4;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c84);
                        }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 7) === peg$c85) {
                          s1 = peg$c85;
                          peg$currPos += 7;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c86);
                          }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c87) {
                            s1 = peg$c87;
                            peg$currPos += 4;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c88);
                            }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 7) === peg$c89) {
                              s1 = peg$c89;
                              peg$currPos += 7;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c90);
                              }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 3) === peg$c91) {
                                s1 = peg$c91;
                                peg$currPos += 3;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$c92);
                                }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 9) === peg$c93) {
                                  s1 = peg$c93;
                                  peg$currPos += 9;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) {
                                    peg$fail(peg$c94);
                                  }
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 5) === peg$c95) {
                                    s1 = peg$c95;
                                    peg$currPos += 5;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                      peg$fail(peg$c96);
                                    }
                                  }
                                  if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 8) === peg$c97) {
                                      s1 = peg$c97;
                                      peg$currPos += 8;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) {
                                        peg$fail(peg$c98);
                                      }
                                    }
                                    if (s1 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 5) === peg$c99) {
                                        s1 = peg$c99;
                                        peg$currPos += 5;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                          peg$fail(peg$c100);
                                        }
                                      }
                                      if (s1 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 8) === peg$c101) {
                                          s1 = peg$c101;
                                          peg$currPos += 8;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) {
                                            peg$fail(peg$c102);
                                          }
                                        }
                                        if (s1 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 4) === peg$c103) {
                                            s1 = peg$c103;
                                            peg$currPos += 4;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                              peg$fail(peg$c104);
                                            }
                                          }
                                          if (s1 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 6) === peg$c105) {
                                              s1 = peg$c105;
                                              peg$currPos += 6;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) {
                                                peg$fail(peg$c106);
                                              }
                                            }
                                            if (s1 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 3) === peg$c107) {
                                                s1 = peg$c107;
                                                peg$currPos += 3;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                  peg$fail(peg$c108);
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c109(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenot() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 33) {
        s1 = peg$c110;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c111);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpr();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c112(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseparenthetical() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseopen_paren();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseor();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseclose_paren();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c113(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseor() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseand();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 124) {
            s3 = peg$c27;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c28);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseor();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c29(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseand();
      }

      return s0;
    }

    function peg$parseand() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseexpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 38) {
            s3 = peg$c31;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c32);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseand();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c33(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseexpr();
      }

      return s0;
    }

    function peg$parseof() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

      s0 = peg$currPos;
      s1 = peg$parsecounter();
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c114) {
          s1 = peg$c114;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c115);
          }
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c116) {
            s2 = peg$c116;
            peg$currPos += 3;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c117);
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s1;
            s2 = peg$c118();
          }
          s1 = s2;
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c119) {
              s2 = peg$c119;
              peg$currPos += 4;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c120);
              }
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s1;
              s2 = peg$c121();
            }
            s1 = s2;
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c18) {
            s3 = peg$c18;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c19);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseopen_paren();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$currPos;
                  s9 = peg$parseor();
                  if (s9 !== peg$FAILED) {
                    s10 = [];
                    s11 = peg$currPos;
                    s12 = peg$parse_();
                    if (s12 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s13 = peg$c122;
                        peg$currPos++;
                      } else {
                        s13 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c123);
                        }
                      }
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parse_();
                        if (s14 !== peg$FAILED) {
                          s15 = peg$parseor();
                          if (s15 !== peg$FAILED) {
                            peg$reportedPos = s11;
                            s12 = peg$c124(s15);
                            s11 = s12;
                          } else {
                            peg$currPos = s11;
                            s11 = peg$c1;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$c1;
                        }
                      } else {
                        peg$currPos = s11;
                        s11 = peg$c1;
                      }
                    } else {
                      peg$currPos = s11;
                      s11 = peg$c1;
                    }
                    while (s11 !== peg$FAILED) {
                      s10.push(s11);
                      s11 = peg$currPos;
                      s12 = peg$parse_();
                      if (s12 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                          s13 = peg$c122;
                          peg$currPos++;
                        } else {
                          s13 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c123);
                          }
                        }
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parse_();
                          if (s14 !== peg$FAILED) {
                            s15 = peg$parseor();
                            if (s15 !== peg$FAILED) {
                              peg$reportedPos = s11;
                              s12 = peg$c124(s15);
                              s11 = s12;
                            } else {
                              peg$currPos = s11;
                              s11 = peg$c1;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$c1;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$c1;
                        }
                      } else {
                        peg$currPos = s11;
                        s11 = peg$c1;
                      }
                    }
                    if (s10 !== peg$FAILED) {
                      peg$reportedPos = s8;
                      s9 = peg$c125(s9, s10);
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$c1;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$c1;
                  }
                  if (s8 !== peg$FAILED) {
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$currPos;
                      s9 = peg$parseor();
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$currPos;
                        s12 = peg$parse_();
                        if (s12 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 44) {
                            s13 = peg$c122;
                            peg$currPos++;
                          } else {
                            s13 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c123);
                            }
                          }
                          if (s13 !== peg$FAILED) {
                            s14 = peg$parse_();
                            if (s14 !== peg$FAILED) {
                              s15 = peg$parseor();
                              if (s15 !== peg$FAILED) {
                                peg$reportedPos = s11;
                                s12 = peg$c124(s15);
                                s11 = s12;
                              } else {
                                peg$currPos = s11;
                                s11 = peg$c1;
                              }
                            } else {
                              peg$currPos = s11;
                              s11 = peg$c1;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$c1;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$c1;
                        }
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$currPos;
                          s12 = peg$parse_();
                          if (s12 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 44) {
                              s13 = peg$c122;
                              peg$currPos++;
                            } else {
                              s13 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c123);
                              }
                            }
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parse_();
                              if (s14 !== peg$FAILED) {
                                s15 = peg$parseor();
                                if (s15 !== peg$FAILED) {
                                  peg$reportedPos = s11;
                                  s12 = peg$c124(s15);
                                  s11 = s12;
                                } else {
                                  peg$currPos = s11;
                                  s11 = peg$c1;
                                }
                              } else {
                                peg$currPos = s11;
                                s11 = peg$c1;
                              }
                            } else {
                              peg$currPos = s11;
                              s11 = peg$c1;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$c1;
                          }
                        }
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s8;
                          s9 = peg$c125(s9, s10);
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$c1;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$c1;
                      }
                    }
                  } else {
                    s7 = peg$c1;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s9 = peg$c122;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c123);
                        }
                      }
                      if (s9 === peg$FAILED) {
                        s9 = peg$c3;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parse_();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseclose_paren();
                          if (s11 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c126(s1, s7);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsemodifier() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      s1 = peg$parsecounter();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c6) {
            s3 = peg$c6;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c7);
            }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c127) {
              s3 = peg$c127;
              peg$currPos += 6;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c128);
              }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c129) {
                s3 = peg$c129;
                peg$currPos += 10;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c130);
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoptional_s();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c34) {
                  s6 = peg$c34;
                  peg$currPos += 4;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c35);
                  }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$currPos;
                    if (input.substr(peg$currPos, 8) === peg$c131) {
                      s9 = peg$c131;
                      peg$currPos += 8;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c132);
                      }
                    }
                    if (s9 !== peg$FAILED) {
                      peg$reportedPos = s8;
                      s9 = peg$c133();
                    }
                    s8 = s9;
                    if (s8 === peg$FAILED) {
                      s8 = peg$currPos;
                      if (input.substr(peg$currPos, 6) === peg$c134) {
                        s9 = peg$c134;
                        peg$currPos += 6;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c135);
                        }
                      }
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s8;
                        s9 = peg$c136();
                      }
                      s8 = s9;
                      if (s8 === peg$FAILED) {
                        s8 = peg$currPos;
                        if (input.substr(peg$currPos, 7) === peg$c13) {
                          s9 = peg$c13;
                          peg$currPos += 7;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c14);
                          }
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parse_();
                          if (s10 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c8) {
                              s11 = peg$c8;
                              peg$currPos += 5;
                            } else {
                              s11 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c9);
                              }
                            }
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parse_();
                              if (s12 !== peg$FAILED) {
                                s13 = peg$parsequalifier();
                                if (s13 !== peg$FAILED) {
                                  peg$reportedPos = s8;
                                  s9 = peg$c137(s13);
                                  s8 = s9;
                                } else {
                                  peg$currPos = s8;
                                  s8 = peg$c1;
                                }
                              } else {
                                peg$currPos = s8;
                                s8 = peg$c1;
                              }
                            } else {
                              peg$currPos = s8;
                              s8 = peg$c1;
                            }
                          } else {
                            peg$currPos = s8;
                            s8 = peg$c1;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$c1;
                        }
                      }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c138(s1, s3, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parserequirement_title() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c139.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c140);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c141.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c142);
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c141.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c142);
            }
          }
        }
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s1;
          s2 = peg$c143(s2, s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c144(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsereference() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parserequirement_title();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s5 = peg$c146;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c147);
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parserequirement_title();
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s7 = peg$c148;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c149);
                }
              }
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c150(s6);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$c3;
        }
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s1;
          s2 = peg$c151(s2, s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c152(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c145);
        }
      }

      return s0;
    }

    function peg$parsedot() {
      var s0, s1;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 46) {
        s0 = peg$c154;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c155);
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c153);
        }
      }

      return s0;
    }

    function peg$parsecourse() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      s1 = peg$parsec_dept();
      if (s1 === peg$FAILED) {
        s1 = peg$c3;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsec_num();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsedot();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsec_sect();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parsedot();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsec_year();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$currPos;
                    s11 = peg$parsedot();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parsec_sem();
                      if (s12 !== peg$FAILED) {
                        peg$reportedPos = s10;
                        s11 = peg$c156(s12);
                        s10 = s11;
                      } else {
                        peg$currPos = s10;
                        s10 = peg$c1;
                      }
                    } else {
                      peg$currPos = s10;
                      s10 = peg$c1;
                    }
                    if (s10 === peg$FAILED) {
                      s10 = peg$c3;
                    }
                    if (s10 !== peg$FAILED) {
                      peg$reportedPos = s7;
                      s8 = peg$c157(s9, s10);
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c1;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c1;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$c1;
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$c3;
                }
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c158(s6, s7);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c3;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c159(s1, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsec_dept() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseuppercase_letter();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseuppercase_letter();
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s1;
          s2 = peg$c160(s2, s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parseuppercase_letter();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseuppercase_letter();
          }
        } else {
          s3 = peg$c1;
        }
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s2;
          s3 = peg$c161(s3);
        }
        s2 = s3;
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 47) {
            s3 = peg$c162;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c163);
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseuppercase_letter();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseuppercase_letter();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s2;
                s3 = peg$c164(s4, s5);
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c1;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c1;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c165(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsec_num() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parsedigit();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsedigit();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsedigit();
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c1;
      }
      if (s2 !== peg$FAILED) {
        peg$reportedPos = s1;
        s2 = peg$c167(s2);
      }
      s1 = s2;
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parsedigit();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c168) {
            s3 = peg$c168;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c169);
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s1;
            s2 = peg$c170(s2);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c1;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 73) {
          s2 = peg$c171;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c172);
          }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c3;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 76) {
            s3 = peg$c173;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c174);
            }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c3;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c175(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c166);
        }
      }

      return s0;
    }

    function peg$parsec_sect() {
      var s0;

      s0 = peg$parseuppercase_letter();
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s0 = peg$c176;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c177);
          }
        }
      }

      return s0;
    }

    function peg$parsec_year() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsedigit();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedigit();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsedigit();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsedigit();
            if (s5 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c1;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c1;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c178(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s0 = peg$c176;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c177);
          }
        }
      }

      return s0;
    }

    function peg$parsec_sem() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c179.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c180);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c181(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s0 = peg$c176;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c177);
          }
        }
      }

      return s0;
    }

    function peg$parseuppercase_letter() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c182.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c183);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c184(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseword() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c185.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c186);
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c185.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c186);
            }
          }
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c187(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenumeric_integer() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsedigit();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsedigit();
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c188(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsedigit() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c189.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c190);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c181(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseopen_paren() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 40) {
        s0 = peg$c146;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c147);
        }
      }

      return s0;
    }

    function peg$parseclose_paren() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 41) {
        s0 = peg$c148;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c149);
        }
      }

      return s0;
    }

    var globalLastDept;

    function storeDept(dept) {
      globalLastDept = dept;
    }

    function fetchDept(dept) {
      return globalLastDept;
    }

    function expandDepartment(dept) {
      if (dept === "AR") return "ART";else if (dept === "AS") return "ASIAN";else if (dept === "ES") return "ENVST";else return dept;
    }

    function flatten(list) {
      return Array.prototype.concat.apply([], list);
    }

    Object.assign = Object.assign || require("lodash").extend;

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse: parse
  };
})();

